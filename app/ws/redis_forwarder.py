# app/ws/redis_forwarder.py
from __future__ import annotations

import asyncio
import json
import contextlib
from typing import Any, Dict, Optional

from app.events.bus import get_bus_for_current_loop, ROBOT_CH, COMMON_CH
from app.ws.ws_manager import manager


async def _dispatch_to_ws(event: Dict[str, Any]) -> None:
    wh: Optional[str] = event.get("warehouse_id")
    if not wh:
        return
    try:
        await manager.broadcast_json(wh, event)
    except Exception as e:
        print(f"‚ö†Ô∏è redis_forwarder: broadcast error: {e}", flush=True)


async def start_redis_forwarder(
    retry_initial_delay: float = 1.0,
    retry_max_delay: float = 30.0,
) -> None:
    """
    –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Pub/Sub –∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –≤ WebSocket-–∫–æ–º–Ω–∞—Ç—ã.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö. –†–∞–±–æ—Ç–∞–µ—Ç –≤ –¢–ï–ö–£–©–ï–ú event loop'–µ.
    """
    delay = retry_initial_delay

    while True:
        pubsub = None
        try:
            # –ë–µ—Ä–µ–º loop-local EventBus (—Ñ–∞–±—Ä–∏–∫–∞ —Å–∞–º–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
            bus = await get_bus_for_current_loop()
            pubsub = await bus.pubsub()
            await pubsub.subscribe(ROBOT_CH, COMMON_CH)
            print(f"üîå redis_forwarder: subscribed to {ROBOT_CH}, {COMMON_CH}", flush=True)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—ç–∫–æ—Ñ—Ñ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            delay = retry_initial_delay

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è Pub/Sub
            async for msg in pubsub.listen():
                # redis-py asyncio –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –≤–∏–¥–∞:
                # {"type": "message", "channel": "<ch>", "data": "<json string>"}
                if not isinstance(msg, dict) or msg.get("type") != "message":
                    continue
                raw = msg.get("data")
                if not raw:
                    continue
                try:
                    event = json.loads(raw)
                except Exception:
                    continue

                await _dispatch_to_ws(event)

        except asyncio.CancelledError:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π shutdown ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ, cleanup –≤ finally
            raise
        except Exception as e:
            print(
                f"‚ùå redis_forwarder: connection loop error: {e}. "
                f"Reconnecting in {delay:.1f}s",
                flush=True,
            )
            await asyncio.sleep(delay)
            delay = min(delay * 2, retry_max_delay)
        finally:
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è/–∑–∞–∫—Ä—ã—Ç—å pubsub –ø—Ä–∏ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if pubsub is not None:
                with contextlib.suppress(Exception):
                    await pubsub.unsubscribe(ROBOT_CH, COMMON_CH)
                with contextlib.suppress(Exception):
                    await pubsub.close()
            print("üîö redis_forwarder: pubsub closed", flush=True)
