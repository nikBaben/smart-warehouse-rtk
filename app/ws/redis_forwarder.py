# app/ws/redis_forwarder.py
from __future__ import annotations

import asyncio
import json
import contextlib
from typing import Any, Dict, Optional

from app.events.bus import get_bus_for_current_loop, ROBOT_CH, COMMON_CH
from app.ws.ws_manager import manager


async def _dispatch_to_ws(event: Dict[str, Any]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤–æ WS-–∫–æ–º–Ω–∞—Ç—É, —Å–æ–≤–ø–∞–¥–∞—é—â—É—é —Å warehouse_id.
    –°–æ–±—ã—Ç–∏—è –±–µ–∑ warehouse_id –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∫—É–¥–∞ —Å–ª–∞—Ç—å).
    """
    
    wh: Optional[str] = event.get("warehouse_id")
    if not wh:
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–ø–∞–ª–∏—Å—å —Å–æ–±—ã—Ç–∏—è –±–µ–∑ warehouse_id ‚Äî –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–¥—É—Ç –≤ –∫–æ–º–Ω–∞—Ç—É
        et = event.get("type")
        #print(f"‚ö†Ô∏è redis_forwarder: skip event without warehouse_id (type={et})", flush=True)
        return
    target_sid: Optional[str] = event.get("unicast_session_id")

    try:
        if target_sid:
            sent = await manager.unicast_json(wh, target_sid, event)
            #print(f"üì§ WS unicast: wh={wh} sid={target_sid} type={event.get('type')} sent={sent}", flush=True)
            return

        sent = await manager.broadcast_json(wh, event)
        #print(f"üì§ WS send: wh={wh} type={event.get('type')} sent={sent}", flush=True)

    except Exception as e:
        print(f"‚ö†Ô∏è redis_forwarder: broadcast error for wh={wh}: {e}. event={event}", flush=True)

    


async def start_redis_forwarder(
    retry_initial_delay: float = 1.0,
    retry_max_delay: float = 30.0,
) -> None:
    """
    –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Redis Pub/Sub –∏ —Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –≤ WebSocket-–∫–æ–º–Ω–∞—Ç—ã.
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –¢–ï–ö–£–©–ï–ú event loop'–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    delay = retry_initial_delay

    while True:
        pubsub = None
        try:
            # –ë–µ—Ä—ë–º loop-local EventBus (—Ñ–∞–±—Ä–∏–∫–∞ —Å–∞–º–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
            bus = await get_bus_for_current_loop()
            pubsub = await bus.pubsub()

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é —Ä–æ–±–æ—Ç–æ–≤ –∏ –Ω–∞ –æ–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è
            await pubsub.subscribe(ROBOT_CH, COMMON_CH)
            #print(f"üîå redis_forwarder: subscribed to channels: {ROBOT_CH}, {COMMON_CH}", flush=True)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—ç–∫–æ—Ñ—Ñ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            delay = retry_initial_delay

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è Pub/Sub
            async for msg in pubsub.listen():
                # redis.asyncio –ø—É–±–ª–∏–∫—É–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (subscribe/unsubscribe)
                # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ "message"
                if not isinstance(msg, dict):
                    continue
                if msg.get("type") != "message":
                    continue

                ch = msg.get("channel")
                raw = msg.get("data")
                if not raw:
                    continue

                # –†–∞–∑–±–æ—Ä JSON; –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                try:
                    event = json.loads(raw)
                except Exception:
                    #print(f"‚ö†Ô∏è redis_forwarder: bad JSON from {ch}: {raw!r}", flush=True)
                    continue

                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ (–º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ)
                et = event.get("type")
                wid = event.get("warehouse_id")
                #print(f"üì® redis_forwarder: {ch} ‚Üê {et} (warehouse_id={wid})", flush=True)

                # –§–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –≤ WS-–∫–æ–º–Ω–∞—Ç—É
                await _dispatch_to_ws(event)

        except asyncio.CancelledError:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π shutdown ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ, cleanup –≤ finally
            raise
        except Exception as e:
            # –õ–æ–≥–∏ + —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±—ç–∫–æ—Ñ—Ñ –ø—Ä–∏ –æ–±—Ä—ã–≤–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è / –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏
            #print(
               # f"‚ùå redis_forwarder: connection loop error: {e}. Reconnecting in {delay:.1f}s",
               # flush=True,
            #)
            await asyncio.sleep(delay)
            delay = min(delay * 2, retry_max_delay)

        finally:
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è/–∑–∞–∫—Ä—ã—Ç—å pubsub –ø—Ä–∏ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if pubsub is not None:
                with contextlib.suppress(Exception):
                    await pubsub.unsubscribe(ROBOT_CH, COMMON_CH)
                with contextlib.suppress(Exception):
                    await pubsub.close()
            #print("üîö redis_forwarder: pubsub closed", flush=True)
