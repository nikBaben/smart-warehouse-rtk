from __future__ import annotations
import asyncio
import queue
from datetime import datetime, timezone
from typing import Optional, Dict, Any

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

# ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
from app.ws.ws_manager import EVENTS_COMMON, manager
from app.db.session import async_session
from app.models.inventory_history import InventoryHistory


def _now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


def _safe_put_common(event: Dict[str, Any]) -> None:
    """
    –ö–ª–∞–¥—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ '–æ–±—â—É—é' janus-–æ—á–µ—Ä–µ–¥—å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
    –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ç–µ—Å–Ω—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–π –∂–µ –æ—á–µ—Ä–µ–¥–∏.
    """
    q = EVENTS_COMMON.sync_q
    try:
        q.put_nowait(event)
    except queue.Full:
        try:
            q.get_nowait()  # drop-oldest
        except Exception:
            pass
        try:
            q.put_nowait(event)
        except Exception:
            pass


# ===== –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –°–û–ë–´–¢–ò–ô =====

async def publish_status_avg_snapshot(session: AsyncSession, warehouse_id: str) -> None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –∫–∞—Ä—Ç–æ–π:
    { "status": —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ stock } –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞.
    –ü—É—Å—Ç—ã–µ/NULL —Å—Ç–∞—Ç—É—Å—ã –∏ NULL stock –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.
    –í OBSHCHUYU –æ—á–µ—Ä–µ–¥—å (COMMON), —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π —Ä–æ–±–æ—Ç–æ–≤.
    """
    try:
        stmt = (
            select(
                func.lower(InventoryHistory.status).label("status"),
                func.avg(InventoryHistory.stock).label("avg_stock"),
            )
            .where(InventoryHistory.warehouse_id == warehouse_id)
            .where(InventoryHistory.status.is_not(None))
            .where(func.length(func.trim(InventoryHistory.status)) > 0)
            .where(InventoryHistory.stock.is_not(None))
            .group_by(func.lower(InventoryHistory.status))
        )

        rows = (await session.execute(stmt)).all()
        avgs: Dict[str, float] = {status: round(float(avg or 0.0), 2) for status, avg in rows}
        if avgs:
            status, max_avg = max(avgs.items(), key=lambda item: item[1])
        else:
            status, max_avg = None, 0.0

        _safe_put_common({
            "type": "inventory.status_avg",
            "warehouse_id": warehouse_id,
            "status": status,
            "max_avg": max_avg,
            "avgs": avgs,          # üëâ –º–æ–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –≤—Å—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç—É –Ω—É–∂–Ω–æ
            "ts": _now_iso(),
        })
    except Exception as e:
        print(f"‚ùå publish_status_avg_snapshot({warehouse_id}) error: {e}")


async def publish_inventory_history_changed(session: AsyncSession, history_id: str) -> None:
    """
    –í—ã–∑—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ InventoryHistory.
    –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏–º —Å–∫–ª–∞–¥ –∏ –ø—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–Ω—ç–ø—à–æ—Ç (–≤ COMMON).
    """
    try:
        row = await session.execute(
            select(InventoryHistory.warehouse_id)
            .where(InventoryHistory.id == history_id)
        )
        warehouse_id: Optional[str] = row.scalar_one_or_none()
        if not warehouse_id:
            return
        await publish_status_avg_snapshot(session, warehouse_id)
    except Exception as e:
        print(f"‚ùå publish_inventory_history_changed({history_id}) error: {e}")


# ===== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –°–¢–†–ò–ú–ï–† (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –ö–û–ú–ù–ê–¢) =====

async def continuous_inventory_status_avg_streamer(interval: float = 30.0) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ —Å—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ stock –ø–æ status –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞,
    –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω WS-–ø–æ–¥–ø–∏—Å—á–∏–∫, –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ (–≤ COMMON).
    """
    try:
        while True:
            try:
                rooms = await manager.list_rooms()
                if rooms:
                    async with async_session() as session:
                        for warehouse_id in rooms:
                            await publish_status_avg_snapshot(session, warehouse_id)
            except Exception as inner_err:
                print(f"‚ùå continuous_inventory_status_avg_streamer inner error: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f"üî• continuous_inventory_status_avg_streamer fatal error: {e}")
