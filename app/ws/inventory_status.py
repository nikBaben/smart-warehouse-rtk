# app/ws/inventory_status.py
from __future__ import annotations
import asyncio
from datetime import datetime, timezone
from typing import Optional, Dict, Any, List

from sqlalchemy import select, func, distinct
from sqlalchemy.ext.asyncio import AsyncSession

# ‚úÖ –≤–º–µ—Å—Ç–æ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ bus ‚Äî —Ñ–∞–±—Ä–∏–∫–∞ –ø–æ–¥ —Ç–µ–∫—É—â–∏–π event loop
from app.events.bus import get_bus_for_current_loop, COMMON_CH
from app.db.session import async_session
from app.models.inventory_history import InventoryHistory

# –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä WS-–∫–æ–º–Ω–∞—Ç (–µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ API-–ø—Ä–æ—Ü–µ—Å—Å–µ)
try:
    from app.ws.ws_manager import manager
except Exception:
    manager = None  # type: ignore


def _now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


# ===== –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô =====
async def publish_status_avg_snapshot(session: AsyncSession, warehouse_id: str) -> None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ:
      {
        type: 'inventory.status_avg',
        warehouse_id,
        status,        # —Å—Ç–∞—Ç—É—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º stock
        max_avg,       # –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        avgs: {...},   # –∫–∞—Ä—Ç–∞ {status -> avg(stock)}
        ts
      }
    –ü—É—Å—Ç—ã–µ/NULL —Å—Ç–∞—Ç—É—Å—ã –∏ NULL stock –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.
    """
    try:
        stmt = (
            select(
                func.lower(InventoryHistory.status).label("status"),
                func.avg(InventoryHistory.stock).label("avg_stock"),
            )
            .where(InventoryHistory.warehouse_id == warehouse_id)
            .where(InventoryHistory.status.is_not(None))
            .where(func.length(func.trim(InventoryHistory.status)) > 0)
            .where(InventoryHistory.stock.is_not(None))
            .group_by(func.lower(InventoryHistory.status))
        )

        rows = (await session.execute(stmt)).all()
        avgs: Dict[str, float] = {status: round(float(avg or 0.0), 2) for status, avg in rows}
        if avgs:
            top_status, max_avg = max(avgs.items(), key=lambda item: item[1])
        else:
            top_status, max_avg = None, 0.0

        payload: Dict[str, Any] = {
            "type": "inventory.status_avg",
            "warehouse_id": warehouse_id,
            "status": top_status,
            "max_avg": max_avg,
            "avgs": avgs,
            "ts": _now_iso(),
        }

        # ‚úÖ –ø–æ–ª—É—á–∞–µ–º bus –ø–æ–¥ —Ç–µ–∫—É—â–∏–π event loop
        bus = await get_bus_for_current_loop()
        await bus.publish(COMMON_CH, payload)
    except Exception as e:
        print(f"‚ùå publish_status_avg_snapshot({warehouse_id}) error: {e}")


async def publish_inventory_history_changed(session: AsyncSession, history_id: str) -> None:
    """
    –í—ã–∑—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ InventoryHistory ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç.
    """
    try:
        row = await session.execute(
            select(InventoryHistory.warehouse_id)
            .where(InventoryHistory.id == history_id)
        )
        warehouse_id: Optional[str] = row.scalar_one_or_none()
        if not warehouse_id:
            return
        await publish_status_avg_snapshot(session, warehouse_id)
    except Exception as e:
        print(f"‚ùå publish_inventory_history_changed({history_id}) error: {e}")


# ---- –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ ----
async def _get_active_warehouses_by_ws() -> List[str]:
    """–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (API-—Ä–µ–∂–∏–º)."""
    if manager is None:
        return []
    try:
        rooms = await manager.list_rooms()
        return rooms or []
    except Exception:
        return []

async def _get_active_warehouses_by_db(session: AsyncSession) -> List[str]:
    """–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ InventoryHistory (worker-—Ä–µ–∂–∏–º)."""
    rows = await session.execute(select(distinct(InventoryHistory.warehouse_id)))
    return [wid for (wid,) in rows.all() if wid]


# ===== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –°–¢–†–ò–ú–ï–† =====
async def continuous_inventory_status_avg_streamer(
    interval: float = 30.0,
    use_ws_rooms: bool = False,
) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ —Å—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ stock –ø–æ status –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Redis (COMMON_CH).
    use_ws_rooms=True  ‚Üí –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (API-–ø—Ä–æ—Ü–µ—Å—Å).
    use_ws_rooms=False ‚Üí –±—Ä–∞—Ç—å —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î (worker-–ø—Ä–æ—Ü–µ—Å—Å).
    """
    print(f"üöÄ continuous_inventory_status_avg_streamer(interval={interval}, use_ws_rooms={use_ws_rooms})")
    try:
        while True:
            try:
                if use_ws_rooms:
                    wh_ids = await _get_active_warehouses_by_ws()
                    if not wh_ids:
                        await asyncio.sleep(interval)
                        continue
                    async with async_session() as session:
                        for wid in wh_ids:
                            await publish_status_avg_snapshot(session, wid)
                else:
                    async with async_session() as session:
                        wh_ids = await _get_active_warehouses_by_db(session)
                        for wid in wh_ids:
                            await publish_status_avg_snapshot(session, wid)
            except Exception as inner_err:
                print(f"‚ùå continuous_inventory_status_avg_streamer inner error: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        print("üõë continuous_inventory_status_avg_streamer cancelled")
    except Exception as e:
        print(f"üî• continuous_inventory_status_avg_streamer fatal error: {e}")
