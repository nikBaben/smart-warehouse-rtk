# app/ws/inventory_scans_streamer.py
from __future__ import annotations
import asyncio
from datetime import datetime, timedelta, timezone
from typing import Optional, List, Dict, Any

from sqlalchemy import select, func, distinct
from sqlalchemy.ext.asyncio import AsyncSession

# ‚úÖ –±–µ—Ä—ë–º —Ñ–∞–±—Ä–∏–∫—É bus –ø–æ–¥ —Ç–µ–∫—É—â–∏–π event loop
from app.events.bus import get_bus_for_current_loop, COMMON_CH
from app.db.session import async_session
from app.models.inventory_history import InventoryHistory

# –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä WS-–∫–æ–º–Ω–∞—Ç (–µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ API-–ø—Ä–æ—Ü–µ—Å—Å–µ)
try:
    from app.ws.ws_manager import manager
except Exception:
    manager = None  # type: ignore


# ‚Äî‚Äî‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ‚Äî‚Äî‚Äî
def _now_utc() -> datetime:
    return datetime.now(timezone.utc)

def _now_iso() -> str:
    return _now_utc().isoformat()

def _cutoff_utc(hours: int = 24) -> datetime:
    return _now_utc() - timedelta(hours=hours)


# ‚Äî‚Äî‚Äî –ü–∞–±–ª–∏—à–µ—Ä –≤ Redis ‚Äî‚Äî‚Äî
async def publish_inventory_scanned_24h_snapshot(
    session: AsyncSession,
    warehouse_id: str,
    hours: int = 24,
) -> None:
    """
    –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π InventoryHistory –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `hours` —á–∞—Å–æ–≤
    –ø–æ —Å–∫–ª–∞–¥—É –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Redis –∫–∞–Ω–∞–ª COMMON_CH.
    """
    try:
        cutoff = _cutoff_utc(hours)
        stmt = (
            select(func.count(InventoryHistory.id))
            .where(InventoryHistory.warehouse_id == warehouse_id)
            .where(InventoryHistory.created_at >= cutoff)
            .where(InventoryHistory.product_id.is_not(None))
        )
        count = await session.scalar(stmt)

        event: Dict[str, Any] = {
            "type": "inventory.scanned_24h",
            "warehouse_id": warehouse_id,
            "count": int(count or 0),
            "hours": hours,
            "ts": _now_iso(),
        }

        bus = await get_bus_for_current_loop()
        await bus.publish(COMMON_CH, event)
    except Exception as e:
        print(f"‚ùå publish_inventory_scanned_24h_snapshot({warehouse_id}) error: {e}")


async def publish_inventory_new_scan(session: AsyncSession, history_id: str, hours: int = 24) -> None:
    """
    –í—ã–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ InventoryHistory:
    –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏–º –µ—ë —Å–∫–ª–∞–¥ –∏ –ø—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–Ω—ç–ø—à–æ—Ç –≤ COMMON_CH.
    """
    try:
        row = await session.execute(
            select(InventoryHistory.warehouse_id).where(InventoryHistory.id == history_id)
        )
        warehouse_id: Optional[str] = row.scalar_one_or_none()
        if not warehouse_id:
            return
        await publish_inventory_scanned_24h_snapshot(session, warehouse_id, hours=hours)
    except Exception as e:
        print(f"‚ùå publish_inventory_new_scan({history_id}) error: {e}")


# ‚Äî‚Äî‚Äî –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ¬´–∞–∫—Ç–∏–≤–Ω—ã—Ö¬ª —Å–∫–ª–∞–¥–æ–≤ ‚Äî‚Äî‚Äî
async def _get_active_warehouses_by_ws() -> List[str]:
    """–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (API-—Ä–µ–∂–∏–º)."""
    if manager is None:
        return []
    try:
        rooms = await manager.list_rooms()
        return rooms or []
    except Exception:
        return []

async def _get_active_warehouses_by_db(session: AsyncSession) -> List[str]:
    """–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–æ–±—â–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ InventoryHistory (worker-—Ä–µ–∂–∏–º)."""
    rows = await session.execute(select(distinct(InventoryHistory.warehouse_id)))
    return [wid for (wid,) in rows.all() if wid]


# ‚Äî‚Äî‚Äî –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∏–º–µ—Ä ‚Äî‚Äî‚Äî
async def continuous_inventory_scans_streamer(
    interval: float = 30.0,
    hours: int = 24,
    use_ws_rooms: bool = False,
) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `hours` —á–∞—Å–æ–≤
    –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –≤ Redis (COMMON_CH).

    use_ws_rooms=True  ‚Üí –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (API-–ø—Ä–æ—Ü–µ—Å—Å).
    use_ws_rooms=False ‚Üí –±—Ä–∞—Ç—å —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î (worker-–ø—Ä–æ—Ü–µ—Å—Å).
    """
    print(f"üöÄ continuous_inventory_scans_streamer(interval={interval}, hours={hours}, use_ws_rooms={use_ws_rooms})")
    try:
        while True:
            try:
                if use_ws_rooms:
                    wh_ids = await _get_active_warehouses_by_ws()
                    if not wh_ids:
                        await asyncio.sleep(interval)
                        continue
                    async with async_session() as session:
                        for wid in wh_ids:
                            await publish_inventory_scanned_24h_snapshot(session, wid, hours=hours)
                else:
                    async with async_session() as session:
                        wh_ids = await _get_active_warehouses_by_db(session)
                        for wid in wh_ids:
                            await publish_inventory_scanned_24h_snapshot(session, wid, hours=hours)

            except Exception as inner_err:
                print(f"‚ùå continuous_inventory_scans_streamer inner error: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        print("üõë continuous_inventory_scans_streamer cancelled")
    except Exception as e:
        print(f"üî• continuous_inventory_scans_streamer fatal error: {e}")
