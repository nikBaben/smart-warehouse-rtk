from __future__ import annotations
from typing import Optional, Dict, Any
import asyncio
import queue
from datetime import datetime, timedelta, timezone

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

# ‚ö†Ô∏è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
from app.ws.ws_manager import EVENTS_COMMON, manager
from app.models.inventory_history import InventoryHistory
from app.db.session import async_session  # —Ç–æ—Ç –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω, —á—Ç–æ –∏ —É –ø—Ä–æ–¥—É–∫—Ç–æ–≤


# ‚Äî‚Äî‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ‚Äî‚Äî‚Äî
def _now_utc() -> datetime:
    return datetime.now(timezone.utc)

def _now_iso() -> str:
    return _now_utc().isoformat()

def _cutoff_utc(hours: int = 24) -> datetime:
    return _now_utc() - timedelta(hours=hours)

def _safe_put_common(event: Dict[str, Any]) -> None:
    """
    –ö–ª–∞–¥—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ '–æ–±—â—É—é' janus-–æ—á–µ—Ä–µ–¥—å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
    –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ç–µ—Å–Ω—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–π –∂–µ –æ—á–µ—Ä–µ–¥–∏.
    """
    q = EVENTS_COMMON.sync_q
    try:
        q.put_nowait(event)
    except queue.Full:
        try:
            q.get_nowait()
        except Exception:
            pass
        try:
            q.put_nowait(event)
        except Exception:
            pass


# ‚Äî‚Äî‚Äî –ü–∞–±–ª–∏—à–µ—Ä—ã ‚Äî‚Äî‚Äî

async def publish_inventory_scanned_24h_snapshot(
    session: AsyncSession,
    warehouse_id: str,
    hours: int = 24,
) -> None:
    """
    –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π InventoryHistory –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `hours` —á–∞—Å–æ–≤
    –ø–æ —Å–∫–ª–∞–¥—É –∏ –∫–ª–∞–¥—ë—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –û–ë–©–£–Æ –æ—á–µ—Ä–µ–¥—å WS-–±—Ä–æ–∫–∞—Å—Ç–µ—Ä–∞.
    """
    try:
        cutoff = _cutoff_utc(hours)
        # ¬´–ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä¬ª —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
        stmt = (
            select(func.count(InventoryHistory.id))
            .where(InventoryHistory.warehouse_id == warehouse_id)
            .where(InventoryHistory.created_at >= cutoff)
            .where(InventoryHistory.product_id.is_not(None))
        )
        count = await session.scalar(stmt)
        _safe_put_common({
            "type": "inventory.scanned_24h",
            "warehouse_id": warehouse_id,
            "count": int(count or 0),
            "hours": hours,
            "ts": _now_iso(),
        })
    except Exception as e:
        print(f"‚ùå publish_inventory_scanned_24h_snapshot({warehouse_id}) error: {e}")


async def publish_inventory_new_scan(session: AsyncSession, history_id: str, hours: int = 24) -> None:
    """
    –í—ã–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ InventoryHistory:
    –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏–º –µ—ë —Å–∫–ª–∞–¥ –∏ –ø—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–Ω—ç–ø—à–æ—Ç.
    """
    try:
        row = await session.execute(
            select(InventoryHistory.warehouse_id)
            .where(InventoryHistory.id == history_id)
        )
        warehouse_id: Optional[str] = row.scalar_one_or_none()
        if not warehouse_id:
            return
        await publish_inventory_scanned_24h_snapshot(session, warehouse_id, hours=hours)
    except Exception as e:
        print(f"‚ùå publish_inventory_new_scan({history_id}) error: {e}")


# ‚Äî‚Äî‚Äî –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∏–º–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç ‚Äî‚Äî‚Äî

async def continuous_inventory_scans_streamer(interval: float = 30.0, hours: int = 24) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `hours` —á–∞—Å–æ–≤ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ö–ê–ñ–î–û–ì–û —Å–∫–ª–∞–¥–∞,
    –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω WS-–ø–æ–¥–ø–∏—Å—á–∏–∫ (–≤ –û–ë–©–£–Æ –æ—á–µ—Ä–µ–¥—å).
    """
    try:
        while True:
            try:
                rooms = await manager.list_rooms()
                if rooms:
                    async with async_session() as session:
                        for warehouse_id in rooms:
                            await publish_inventory_scanned_24h_snapshot(session, warehouse_id, hours=hours)
            except Exception as inner_err:
                print(f"‚ùå continuous_inventory_scans_streamer inner error: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f"üî• continuous_inventory_scans_streamer fatal error: {e}")
