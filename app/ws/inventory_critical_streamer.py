from __future__ import annotations
import asyncio
import queue
from datetime import datetime, timezone
from typing import Optional, Dict, Any

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

# ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–Ω–∞—Ç
from app.ws.ws_manager import EVENTS_COMMON, manager
from app.db.session import async_session
from app.models.inventory_history import InventoryHistory


def _now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


def _safe_put_common(event: Dict[str, Any]) -> None:
    """
    –ö–ª–∞–¥—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ '–æ–±—â—É—é' janus-–æ—á–µ—Ä–µ–¥—å (–Ω–µ —Ä–æ–±–æ—Ç–Ω—É—é) –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
    –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ç–µ—Å–Ω—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–π –∂–µ –æ—á–µ—Ä–µ–¥–∏.
    """
    q = EVENTS_COMMON.sync_q  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ janus.Queue
    try:
        q.put_nowait(event)
    except queue.Full:
        try:
            q.get_nowait()  # drop-oldest
        except Exception:
            pass
        try:
            q.put_nowait(event)
        except Exception:
            pass


# ===== –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –°–û–ë–´–¢–ò–ô =====

async def publish_critical_unique_articles_snapshot(
    session: AsyncSession,
    warehouse_id: str,
) -> None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ article)
    –≤ InventoryHistory –¥–ª—è —Å–∫–ª–∞–¥–∞, –≥–¥–µ status='critical'.
    –°–æ–±—ã—Ç–∏–µ –∏–¥—ë—Ç –≤ –û–ë–©–£–Æ –æ—á–µ—Ä–µ–¥—å (COMMON), —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π —Ä–æ–±–æ—Ç–æ–≤.
    """
    try:
        stmt = (
            select(func.count(func.distinct(InventoryHistory.article)))
            .where(InventoryHistory.warehouse_id == warehouse_id)
            .where(func.lower(InventoryHistory.status) == "critical")
        )
        count = await session.scalar(stmt)

        _safe_put_common({
            "type": "inventory.critical_unique",
            "warehouse_id": warehouse_id,
            "unique_articles": int(count or 0),
            "ts": _now_iso(),
        })
    except Exception as e:
        # –Ω–µ —Ä–æ–Ω—è–µ–º –ø–æ—Ç–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥
        print(f"‚ùå publish_critical_unique_articles_snapshot({warehouse_id}) error: {e}")


async def publish_inventory_history_changed(session: AsyncSession, history_id: str) -> None:
    """
    –í—ã–∑—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è InventoryHistory.
    –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏–º —Å–∫–ª–∞–¥ –∏ –ø—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–Ω—ç–ø—à–æ—Ç (–≤ COMMON).
    """
    try:
        row = await session.execute(
            select(InventoryHistory.warehouse_id)
            .where(InventoryHistory.id == history_id)
        )
        warehouse_id: Optional[str] = row.scalar_one_or_none()
        if not warehouse_id:
            return

        await publish_critical_unique_articles_snapshot(session, warehouse_id)
    except Exception as e:
        print(f"‚ùå publish_inventory_history_changed({history_id}) error: {e}")


# ===== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –°–¢–†–ò–ú–ï–† (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –ö–û–ú–ù–ê–¢) =====

async def continuous_inventory_critical_streamer(interval: float = 30.0) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö critical-—Ç–æ–≤–∞—Ä–æ–≤
    –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ö–ê–ñ–î–û–ì–û —Å–∫–ª–∞–¥–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω WS-–ø–æ–¥–ø–∏—Å—á–∏–∫.
    –í—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–¥—É—Ç –≤ –û–ë–©–£–Æ –æ—á–µ—Ä–µ–¥—å (COMMON).
    """
    try:
        while True:
            try:
                rooms = await manager.list_rooms()  # —Å–ø–∏—Å–æ–∫ warehouse_id —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
                if rooms:
                    async with async_session() as session:
                        for warehouse_id in rooms:
                            await publish_critical_unique_articles_snapshot(session, warehouse_id)
            except Exception as inner_err:
                print(f"‚ùå continuous_inventory_critical_streamer inner error: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        # —à—Ç–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        pass
    except Exception as e:
        print(f"üî• continuous_inventory_critical_streamer fatal error: {e}")
