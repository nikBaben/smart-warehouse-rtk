# app/ws/inventory_critical_streamer.py
from __future__ import annotations

import asyncio
from datetime import datetime, timezone
from typing import Optional, List, Dict, Any

from sqlalchemy import select, func, distinct
from sqlalchemy.ext.asyncio import AsyncSession

# ‚úÖ –±–µ—Ä—ë–º —Ñ–∞–±—Ä–∏–∫—É bus, –∞ –Ω–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω
from app.events.bus import get_bus_for_current_loop, COMMON_CH
from app.db.session import async_session
from app.models.inventory_history import InventoryHistory

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–µ–Ω–µ–¥–∂–µ—Ä WS (–µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ API-–ø—Ä–æ—Ü–µ—Å—Å–µ)
try:
    from app.ws.ws_manager import manager
except Exception:
    manager = None  # type: ignore


def _now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


# ===== –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –°–û–ë–´–¢–ò–Ø –í REDIS =====
async def publish_critical_unique_articles_snapshot(
    session: AsyncSession,
    warehouse_id: str,
) -> None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ article)
    –≤ InventoryHistory –¥–ª—è —Å–∫–ª–∞–¥–∞, –≥–¥–µ status='critical'.
    –°–æ–±—ã—Ç–∏–µ —É—Ö–æ–¥–∏—Ç –≤ Redis (COMMON_CH).
    """
    try:
        stmt = (
            select(func.count(func.distinct(InventoryHistory.article)))
            .where(InventoryHistory.warehouse_id == warehouse_id)
            .where(func.lower(InventoryHistory.status) == "critical")
        )
        count = await session.scalar(stmt)

        event: Dict[str, Any] = {
            "type": "inventory.critical_unique",
            "warehouse_id": warehouse_id,
            "unique_articles": int(count or 0),
            "ts": _now_iso(),
        }

        # ‚úÖ –ø–æ–ª—É—á–∞–µ–º bus –ø–æ–¥ —Ç–µ–∫—É—â–∏–π event loop
        bus = await get_bus_for_current_loop()
        await bus.publish(COMMON_CH, event)
    except Exception as e:
        # –Ω–µ —Ä–æ–Ω—è–µ–º –ø–æ—Ç–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥
        print(f"‚ùå publish_critical_unique_articles_snapshot({warehouse_id}) error: {e}")


async def publish_inventory_history_changed(session: AsyncSession, history_id: str) -> None:
    """
    –í—ã–∑—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è InventoryHistory.
    –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏–º —Å–∫–ª–∞–¥ –∏ –ø—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–Ω—ç–ø—à–æ—Ç (–≤ COMMON_CH).
    """
    try:
        row = await session.execute(
            select(InventoryHistory.warehouse_id)
            .where(InventoryHistory.id == history_id)
        )
        warehouse_id: Optional[str] = row.scalar_one_or_none()
        if not warehouse_id:
            return

        await publish_critical_unique_articles_snapshot(session, warehouse_id)
    except Exception as e:
        print(f"‚ùå publish_inventory_history_changed({history_id}) error: {e}")


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ =====
async def _get_active_warehouses_by_ws() -> List[str]:
    """
    –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (API-—Ä–µ–∂–∏–º).
    """
    if manager is None:
        return []
    try:
        rooms = await manager.list_rooms()
        return rooms or []
    except Exception:
        return []


async def _get_active_warehouses_by_db(session: AsyncSession) -> List[str]:
    """
    –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–æ–±—â–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ InventoryHistory (worker-—Ä–µ–∂–∏–º).
    –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á).
    """
    rows = await session.execute(select(distinct(InventoryHistory.warehouse_id)))
    return [wid for (wid,) in rows.all() if wid]


# ===== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –°–¢–†–ò–ú–ï–† =====
async def continuous_inventory_critical_streamer(
    interval: float = 30.0,
    use_ws_rooms: bool = False,
) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö critical-—Ç–æ–≤–∞—Ä–æ–≤
    –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∫–ª–∞–¥–æ–≤.

    –†–µ–∂–∏–º—ã:
      - use_ws_rooms=True  ‚Üí –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (–ª–æ–≥–∏—á–Ω–æ –¥–ª—è API-–ø—Ä–æ—Ü–µ—Å—Å–∞).
      - use_ws_rooms=False ‚Üí –±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î (–ª–æ–≥–∏—á–Ω–æ –¥–ª—è worker-–ø—Ä–æ—Ü–µ—Å—Å–∞).

    –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ Redis –∫–∞–Ω–∞–ª COMMON_CH.
    """
    print(f"üöÄ continuous_inventory_critical_streamer(interval={interval}, use_ws_rooms={use_ws_rooms})")
    try:
        while True:
            try:
                if use_ws_rooms:
                    wh_ids = await _get_active_warehouses_by_ws()
                    if not wh_ids:
                        await asyncio.sleep(interval)
                        continue
                    async with async_session() as session:
                        for wid in wh_ids:
                            await publish_critical_unique_articles_snapshot(session, wid)
                else:
                    async with async_session() as session:
                        wh_ids = await _get_active_warehouses_by_db(session)
                        for wid in wh_ids:
                            await publish_critical_unique_articles_snapshot(session, wid)
            except Exception as inner_err:
                print(f"‚ùå continuous_inventory_critical_streamer inner error: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        # —à—Ç–∞—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        print("üõë continuous_inventory_critical_streamer cancelled")
    except Exception as e:
        print(f"üî• continuous_inventory_critical_streamer fatal error: {e}")
