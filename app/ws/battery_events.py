from __future__ import annotations
from typing import Optional, Dict, Any
import asyncio
import queue
from datetime import datetime, timezone

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

# –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–≤–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä
from app.ws.ws_manager import EVENTS_COMMON, manager
from app.models.robot import Robot
from app.db.session import async_session


def _now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


def _safe_put_common(event: Dict[str, Any]) -> None:
    """
    –ö–ª–∞–¥—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ '–æ–±—â—É—é' janus-–æ—á–µ—Ä–µ–¥—å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
    –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ç–µ—Å–Ω—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–π –∂–µ –æ—á–µ—Ä–µ–¥–∏.
    """
    q = EVENTS_COMMON.sync_q  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ janus
    try:
        q.put_nowait(event)
    except queue.Full:
        try:
            q.get_nowait()  # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ
        except Exception:
            pass
        try:
            q.put_nowait(event)
        except Exception:
            pass


# ===== –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä—è–¥–∫–µ —Ä–æ–±–æ—Ç–æ–≤ =====
async def publish_robot_avg_snapshot(session: AsyncSession, warehouse_id: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–µ —Å–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä—è–¥–∫–æ–π —Ä–æ–±–æ—Ç–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É (–∏–¥—ë—Ç –≤ COMMON-–æ—á–µ—Ä–µ–¥—å)."""
    try:
        result = await session.execute(
            select(func.avg(Robot.battery_level)).where(Robot.warehouse_id == warehouse_id)
        )
        avg = result.scalar_one_or_none() or 0.0
        avg = round(float(avg), 2)

        event = {
            "type": "robot.avg_battery",
            "warehouse_id": warehouse_id,
            "avg_battery": avg,
            "ts": _now_iso(),
        }

        _safe_put_common(event)
        print(f"‚ö° [publish_robot_avg_snapshot] –°–∫–ª–∞–¥ {warehouse_id}: —Å—Ä–µ–¥–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ = {avg}%")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_robot_avg_snapshot –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}: {e}")


async def publish_robot_battery_changed(session: AsyncSession, robot_id: str) -> None:
    """–ö–æ–≥–¥–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –∑–∞—Ä—è–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Å–∫–ª–∞–¥—É."""
    try:
        wh_row = await session.execute(select(Robot.warehouse_id).where(Robot.id == robot_id))
        warehouse_id: Optional[str] = wh_row.scalar_one_or_none()
        if not warehouse_id:
            print(f"‚ö†Ô∏è [publish_robot_battery_changed] robot_id={robot_id}: —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await publish_robot_avg_snapshot(session, warehouse_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_robot_battery_changed –¥–ª—è {robot_id}: {e}")


async def publish_robot_deleted(session: AsyncSession, robot_id: str, warehouse_id: str) -> None:
    """–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–±–æ—Ç–∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    try:
        await publish_robot_avg_snapshot(session, warehouse_id)
        print(f"üóëÔ∏è [publish_robot_deleted] –†–æ–±–æ—Ç {robot_id} —É–¥–∞–ª—ë–Ω, –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –∑–∞—Ä—è–¥–∫–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_robot_deleted –¥–ª—è {robot_id}: {e}")


# ===== –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º =====
async def continuous_robot_avg_streamer(interval: float = 2.0) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä—è–¥–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤,
    –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ WS-–∫–ª–∏–µ–Ω—Ç—ã.
    –°–æ–±—ã—Ç–∏—è —Ç–∞–∫–∂–µ –∏–¥—É—Ç –≤ '–æ–±—â—É—é' –æ—á–µ—Ä–µ–¥—å (COMMON), —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π —Ä–æ–±–æ—Ç–æ–≤.
    """
    print("üöÄ continuous_robot_avg_streamer –∑–∞–ø—É—â–µ–Ω.")
    try:
        while True:
            try:
                rooms = await manager.list_rooms()  # –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–∫–ª–∏–µ–Ω—Ç–∞–º–∏
                print("üì° [continuous_robot_avg_streamer] –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã:", rooms)

                if rooms:
                    async with async_session() as session:
                        for warehouse_id in rooms:
                            await publish_robot_avg_snapshot(session, warehouse_id)
                else:
                    print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ WebSocket.")
            except Exception as inner_err:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        print("üõë continuous_robot_avg_streamer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CancelledError).")
    except Exception as e:
        print(f"üî• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ continuous_robot_avg_streamer: {e}")
