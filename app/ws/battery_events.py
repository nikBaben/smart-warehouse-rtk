# app/ws/battery_events.py
from __future__ import annotations

import asyncio
from datetime import datetime, timezone
from typing import Optional, List

from sqlalchemy import select, func, distinct
from sqlalchemy.ext.asyncio import AsyncSession

# ‚úÖ –±–µ—Ä—ë–º —Ñ–∞–±—Ä–∏–∫—É bus, –∞ –Ω–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω
from app.events.bus import get_bus_for_current_loop, COMMON_CH
from app.models.robot import Robot
from app.db.session import async_session

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–µ–Ω–µ–¥–∂–µ—Ä WS (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ç—Ä–∏–º–µ—Ä –∫—Ä—É—Ç–∏—Ç—Å—è –≤ API)
try:
    from app.ws.ws_manager import manager
except Exception:  # –≤ –≤–æ—Ä–∫–µ—Ä–µ –º–æ–¥—É–ª—è –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
    manager = None  # type: ignore


def _now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


# ===== –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Redis =====
async def publish_robot_avg_snapshot(session: AsyncSession, warehouse_id: str) -> None:
    """
    –°—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –∑–∞—Ä—è–¥ —Ä–æ–±–æ—Ç–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Redis (COMMON_CH).
    """
    try:
        result = await session.execute(
            select(func.avg(Robot.battery_level)).where(Robot.warehouse_id == warehouse_id)
        )
        avg = result.scalar_one_or_none() or 0.0
        avg = round(float(avg), 2)

        event = {
            "type": "robot.avg_battery",
            "warehouse_id": warehouse_id,
            "avg_battery": avg,
            "ts": _now_iso(),
        }

        # ‚úÖ –ø–æ–ª—É—á–∞–µ–º bus, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–∫—É—â–µ–º—É event loop
        bus = await get_bus_for_current_loop()
        await bus.publish(COMMON_CH, event)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_robot_avg_snapshot –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}: {e}")


async def publish_robot_battery_changed(session: AsyncSession, robot_id: str) -> None:
    """
    –í—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—Ä—è–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –µ–≥–æ —Å–∫–ª–∞–¥—É.
    """
    try:
        wh_row = await session.execute(select(Robot.warehouse_id).where(Robot.id == robot_id))
        warehouse_id: Optional[str] = wh_row.scalar_one_or_none()
        if not warehouse_id:
            return
        await publish_robot_avg_snapshot(session, warehouse_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_robot_battery_changed –¥–ª—è {robot_id}: {e}")


async def publish_robot_deleted(session: AsyncSession, robot_id: str, warehouse_id: str) -> None:
    """
    –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–±–æ—Ç–∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Å–∫–ª–∞–¥—É.
    """
    try:
        await publish_robot_avg_snapshot(session, warehouse_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_robot_deleted –¥–ª—è {robot_id}: {e}")


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ =====

async def _get_active_warehouses_by_ws() -> List[str]:
    """
    –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ –∫—Ä—É—Ç–∏—Ç—Å—è –≤ API).
    """
    if manager is None:
        return []
    try:
        rooms = await manager.list_rooms()
        return rooms or []
    except Exception:
        return []


async def _get_active_warehouses_by_db(session: AsyncSession) -> List[str]:
    """
    –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–æ–±–æ—Ç (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞).
    """
    rows = await session.execute(select(distinct(Robot.warehouse_id)))
    return [wid for (wid,) in rows.all() if wid]


# ===== –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∏–º–µ—Ä =====
async def continuous_robot_avg_streamer(interval: float = 60.0, use_ws_rooms: bool = False) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –ø—É–±–ª–∏–∫—É–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –∑–∞—Ä—è–¥ –ø–æ —Å–∫–ª–∞–¥–∞–º.

    –†–µ–∂–∏–º—ã:
      - use_ws_rooms=True  ‚Üí –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (–ª–æ–≥–∏—á–Ω–æ –¥–ª—è API-–ø—Ä–æ—Ü–µ—Å—Å–∞).
      - use_ws_rooms=False ‚Üí –±–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î (–ª–æ–≥–∏—á–Ω–æ –¥–ª—è worker-–ø—Ä–æ—Ü–µ—Å—Å–∞).

    –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ Redis –∫–∞–Ω–∞–ª COMMON_CH.
    """
    print(f"üöÄ continuous_robot_avg_streamer –∑–∞–ø—É—â–µ–Ω (interval={interval}s, use_ws_rooms={use_ws_rooms}).")
    try:
        while True:
            try:
                if use_ws_rooms:
                    # API-—Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã
                    wh_ids = await _get_active_warehouses_by_ws()
                    if not wh_ids:
                        await asyncio.sleep(interval)
                        continue
                    async with async_session() as session:
                        for wid in wh_ids:
                            await publish_robot_avg_snapshot(session, wid)
                else:
                    # Worker-—Ä–µ–∂–∏–º: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã –ø–æ –ë–î
                    async with async_session() as session:
                        wh_ids = await _get_active_warehouses_by_db(session)
                        for wid in wh_ids:
                            await publish_robot_avg_snapshot(session, wid)

            except Exception as inner_err:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∏–º–µ—Ä–∞: {inner_err}")

            await asyncio.sleep(interval)

    except asyncio.CancelledError:
        print("üõë continuous_robot_avg_streamer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CancelledError).")
    except Exception as e:
        print(f"üî• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ continuous_robot_avg_streamer: {e}")
