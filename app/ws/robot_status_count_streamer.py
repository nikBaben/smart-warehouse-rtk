# app/stream/robot_active_count_streamer.py
from __future__ import annotations

import asyncio
from datetime import datetime, timezone
from typing import Optional, Dict, List

from sqlalchemy import select, func, distinct
from sqlalchemy.ext.asyncio import AsyncSession

# ‚úÖ –ø—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É —à–∏–Ω—ã –ø–æ–¥ –¢–ï–ö–£–©–ò–ô event loop
from app.events.bus import get_bus_for_current_loop, COMMON_CH
from app.db.session import async_session
from app.models.robot import Robot

# –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–Ω–∞—Ç –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ API-–ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
try:
    from app.ws.ws_manager import manager  # type: ignore
except Exception:
    manager = None  # type: ignore

# --- –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ ---
ACTIVE_STATUSES = ("idle", "scanning")


def _now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


# === –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ===
async def publish_robot_status_count_snapshot(
    session: AsyncSession,
    warehouse_id: str,
) -> None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–∑ ACTIVE_STATUSES.
    –¢–∞–∫–∂–µ –æ—Ç–¥–∞—ë—Ç –æ–±—â—É—é —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º.
    """
    total_all_val = await session.scalar(
        select(func.count(Robot.id)).where(Robot.warehouse_id == warehouse_id)
    )
    total_robots = int(total_all_val or 0)

    stmt = (
        select(
            func.lower(Robot.status).label("status"),
            func.count(Robot.id).label("cnt"),
        )
        .where(Robot.warehouse_id == warehouse_id)
        .where(func.lower(Robot.status).in_(ACTIVE_STATUSES))
        .group_by(func.lower(Robot.status))
    )
    rows = (await session.execute(stmt)).all()
    per_status: Dict[str, int] = {str(status): int(cnt) for status, cnt in rows}
    active_total = sum(per_status.values())

    bus = await get_bus_for_current_loop()
    await bus.publish(COMMON_CH, {
        "type": "robot.active_robots",
        "warehouse_id": warehouse_id,
        "active_robots": active_total,
        "robots": total_robots,
        "per_status": per_status,
        "ts": _now_iso(),
    })


async def publish_robot_status_changed(session: AsyncSession, robot_id: str) -> None:
    """
    –í—ã–∑—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–±–æ—Ç–∞ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø–æ —Å–∫–ª–∞–¥—É.
    """
    row = await session.execute(select(Robot.warehouse_id).where(Robot.id == robot_id))
    warehouse_id: Optional[str] = row.scalar_one_or_none()
    if not warehouse_id:
        return
    await publish_robot_status_count_snapshot(session, warehouse_id)


async def publish_robot_deleted(session: AsyncSession, robot_id: str, warehouse_id: str) -> None:
    """
    –ï—Å–ª–∏ —Ä–æ–±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ —Å–∫–ª–∞–¥—É.
    """
    await publish_robot_status_count_snapshot(session, warehouse_id)


# === –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ ===
async def _get_active_warehouses_by_ws() -> List[str]:
    """–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (API-—Ä–µ–∂–∏–º)."""
    if manager is None:
        return []
    try:
        rooms = await manager.list_rooms()
        return rooms or []
    except Exception:
        return []

async def _get_active_warehouses_by_db(session: AsyncSession) -> List[str]:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–æ–±–æ—Ç (worker-—Ä–µ–∂–∏–º)."""
    rows = await session.execute(select(distinct(Robot.warehouse_id)))
    return [wid for (wid,) in rows.all() if wid]


# === —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ===
async def continuous_robot_status_count_streamer(
    interval: float = 5.0,
    use_ws_rooms: bool = False,
) -> None:
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –ø—É–±–ª–∏–∫—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±–æ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ ACTIVE_STATUSES –ø–æ —Å–∫–ª–∞–¥–∞–º.

    use_ws_rooms=True  ‚Üí –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WS-–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ (API-–ø—Ä–æ—Ü–µ—Å—Å).
    use_ws_rooms=False ‚Üí –±—Ä–∞—Ç—å —Å–∫–ª–∞–¥—ã –∏–∑ –ë–î (worker-–ø—Ä–æ—Ü–µ—Å—Å).
    """
    print(f"üöÄ continuous_robot_status_count_streamer(interval={interval}, use_ws_rooms={use_ws_rooms})")
    try:
        while True:
            try:
                if use_ws_rooms:
                    wh_ids = await _get_active_warehouses_by_ws()
                    if not wh_ids:
                        await asyncio.sleep(interval)
                        continue
                    async with async_session() as session:
                        for warehouse_id in wh_ids:
                            await publish_robot_status_count_snapshot(session, warehouse_id)
                else:
                    async with async_session() as session:
                        wh_ids = await _get_active_warehouses_by_db(session)
                        for warehouse_id in wh_ids:
                            await publish_robot_status_count_snapshot(session, warehouse_id)
            except Exception as inner_err:
                print(f"‚ùå continuous_robot_status_count_streamer inner error: {inner_err}")

            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        print("üõë continuous_robot_status_count_streamer cancelled")
    except Exception as e:
        print(f"üî• continuous_robot_status_count_streamer fatal error: {e}")
