# app/service/predict_service.py
import logging
from datetime import datetime
from typing import List, Dict, Optional

from app.ml.predictor import Predictor
from app.repositories.predict_repo import PredictRepository
from app.repositories.product_repo import ProductRepository
from app.repositories.warehouse_repo import WarehouseRepository
from app.ml.data_access import fetch_all_product_ids

log = logging.getLogger("service.predict")


class PredictService:
    def __init__(
        self,
        predict_repo: PredictRepository,
        product_repo: Optional[ProductRepository] = None,
        warehouse_repo: Optional[WarehouseRepository] = None,
    ):
        """
        predict_repo  ‚Äî –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (—Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π predict_at)
        product_repo  ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è product_name). –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤ product_name –ø–∏—à–µ–º product_id.
        warehouse_repo ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–Ω—É–∂–µ–Ω –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º).
        """
        self.repo = predict_repo
        self.product_repo = product_repo
        self.warehouse_repo = warehouse_repo

    # === –î–ª—è API: —Ç–æ–ø-5 –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—é ===
    async def get_top5_depletion(self, warehouse_id: str) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π:
        [{product_id, product_name, warehouse_id, p50, p10, p90, p_deplete_within}, ...]
        """
        rows = await self.repo.get_top5_soon_depleted(warehouse_id)
        return rows

    # === –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ ===
    async def rebuild_predictions_for_all_warehouses(self, horizon_days: int = 60):
        if not self.warehouse_repo:
            raise RuntimeError("WarehouseRepository –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ PredictService")

        warehouse_ids = await self.warehouse_repo.list_ids()
        for wid in warehouse_ids:
            await self.rebuild_predictions_for_warehouse(wid, horizon_days)

    # === –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ ===
    async def rebuild_predictions_for_warehouse(self, warehouse_id: str, horizon_days: int = 60):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –∏—Å—Ç–æ—â–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º —Å–∫–ª–∞–¥–∞.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç product_name (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ product_repo).
        """
        log.info(f"üîÆ –ü–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}...")
        session = self.repo.session

        # 1) —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞
        product_ids = await fetch_all_product_ids(session, warehouse_id)
        if not product_ids:
            log.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ {warehouse_id}")
            return

        # 2) –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        results = []
        for pid in product_ids:
            # –∏–º—è —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤)
            product_name = pid
            try:
                if self.product_repo and hasattr(self.product_repo, "get_name"):
                    # –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ –≤–∏–¥–∞: async def get_name(self, product_id: str) -> Optional[str]
                    name = await self.product_repo.get_name(pid)
                    if name:
                        product_name = name
            except Exception as e:
                log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è {pid}: {e}")

            # –ø—É—Ç—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            model_path = f"/app/models_store/{pid}.pkl"
            predictor = Predictor(model_path=model_path)  # –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å fallback

            try:
                # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
                if hasattr(predictor, "predict_depletion_with_confidence"):
                    p50, p10, p90, p_within = await predictor.predict_depletion_with_confidence(
                        product_id=pid,
                        warehouse_id=warehouse_id,
                        horizon_days=horizon_days,
                        as_of=datetime.utcnow(),
                    )
                else:
                    # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –µ—â—ë –Ω–µ –≤–ª–∏—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    p50 = await predictor.predict_depletion_date(
                        product_id=pid,
                        warehouse_id=warehouse_id,
                        horizon_days=horizon_days,
                        as_of=datetime.utcnow(),
                    )
                    p10 = p90 = None
                    p_within = None

                if p50:
                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å product_name (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º PredictRepository.save_predictions)
                    results.append((pid, warehouse_id, product_name, p50, p10, p90, p_within))
                    log.info(f"‚úÖ {pid} ({product_name}): –∏—Å—Ç–æ—â–µ–Ω–∏–µ {p50}")
                else:
                    log.info(f"‚ö†Ô∏è {pid} ({product_name}): –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –∏—Å—Ç–æ—â–µ–Ω–∏—è")

            except Exception as e:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ {pid}: {e}")

        # 3) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ predict_at
        await self.repo.save_predictions(results)
        log.info(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}")

    async def rebuild_prediction_for_product(
        self,
        warehouse_id: str,
        product_id: str,
        horizon_days: int = 60,
    ) -> Dict:
        product_name = product_id
        try:
            if self.product_repo and hasattr(self.product_repo, "get_name"):
                name = await self.product_repo.get_name(product_id)
                if name:
                    product_name = name
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è {product_id}: {e}")

        predictor = Predictor(model_path=f"/app/models_store/{product_id}.pkl")

        p50, p10, p90, p_within = await predictor.predict_depletion_with_confidence(
            product_id=product_id,
            warehouse_id=warehouse_id,
            horizon_days=horizon_days,
            as_of=datetime.utcnow(),
        )

        if p50:
            await self.repo.save_predictions([
                (product_id, warehouse_id, product_name, p50, p10, p90, p_within)
            ])

        return {
            "product_id": product_id,
            "product_name": product_name,
            "warehouse_id": warehouse_id,
            "horizon_days": horizon_days,
            "depletion_at": p50.isoformat() if p50 else None,
            "p10": p10.isoformat() if p10 else None,
            "p90": p90.isoformat() if p90 else None,
            "p_deplete_within": p_within,
            "persisted": bool(p50),
        }