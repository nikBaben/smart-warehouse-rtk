import asyncio
import logging
from app.db.session import async_session
from app.repositories.product_repo import ProductRepository
from app.repositories.predict_repo import PredictRepository
from app.service.predict_service import PredictService

log = logging.getLogger("scheduler.rebuild_predictions")


async def run(cfg=None):
    """
    –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ/–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏—Å—Ç–æ—â–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º —Å–∫–ª–∞–¥–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
    """
    warehouse_id = getattr(cfg, "warehouse_id", "WH_001")  # –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    horizon_days = getattr(cfg, "horizon_days", 60)

    log.info(f"üîÅ –°—Ç–∞—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É {warehouse_id}")

    async with async_session() as session:
        svc = PredictService(
            PredictRepository(session),
            ProductRepository(session)
        )
        try:
            result = await svc.rebuild_predictions_for_warehouse(
                warehouse_id=warehouse_id,
                horizon_days=horizon_days,
                auto_train=False
            )
            log.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {result}")
        except Exception as e:
            log.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")

    log.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É {warehouse_id}")
