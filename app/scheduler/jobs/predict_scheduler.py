import logging
from datetime import datetime, timedelta, timezone
from app.db.session import async_session as async_session_maker
from app.repositories.predict_repo import PredictRepository
from app.repositories.warehouse_repo import WarehouseRepository
from app.service.predict_service import PredictService

log = logging.getLogger("scheduler.predict_scheduler")

async def run(cfg=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Å–∫–ª–∞–¥—ã: –µ—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π (–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç),
    –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç.
    """
    horizon_days = getattr(cfg, "horizon_days", 60)
    refresh_days = getattr(cfg, "predict_refresh_days", 7)
    refresh_interval = timedelta(days=refresh_days)

    now = datetime.now(timezone.utc)
    log.info(f"üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª {refresh_days} –¥–Ω–µ–π)")

    async with async_session_maker() as session:
        repo = PredictRepository(session)
        svc = PredictService(repo)
        warehouse_repo = WarehouseRepository(session)

        warehouse_ids = await warehouse_repo.list_ids()
        if not warehouse_ids:
            log.warning("‚ö†Ô∏è –°–∫–ª–∞–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        for wid in warehouse_ids:
            last_pred = await repo.get_last_prediction_time(wid)

            if last_pred is None:
                log.info(f"üÜï –ù–æ–≤—ã–π —Å–∫–ª–∞–¥ {wid} ‚Üí —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
                await svc.rebuild_predictions_for_warehouse(wid, horizon_days)
                continue

            if now - last_pred >= refresh_interval:
                log.info(f"‚è∞ –°–∫–ª–∞–¥ {wid}: –ø—Ä–æ—à–ª–æ {now - last_pred}, –ø–µ—Ä–µ—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞...")
                await svc.rebuild_predictions_for_warehouse(wid, horizon_days)
            else:
                log.info(f"‚úÖ –°–∫–ª–∞–¥ {wid}: –ø—Ä–æ–≥–Ω–æ–∑ —Å–≤–µ–∂–∏–π ({last_pred}) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
