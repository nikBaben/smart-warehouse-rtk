# app/workers/runner.py
from __future__ import annotations

import asyncio
import os
import signal
from contextlib import suppress

# 1) –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä EventBus –∏ ¬´–ø—Ä–æ–±—Ä–æ—Å¬ª –µ–≥–æ –≤ –º–æ–¥—É–ª—å app.events.bus,
#    —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ –º–æ–≥–ª–∏ –¥–µ–ª–∞—Ç—å: `from app.events.bus import bus`
from app.events.bus import EventBus
import app.events.bus as bus_module

# 2) –≤–∞—à–∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—ç–º—É–ª—è—Ç–æ—Ä –∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –≤—Å–µ continuous_* —Å—Ç—Ä–∏–º–µ—Ä—ã)
from app.robot_emulator.emulator import run_robot_watcher
# –ü—Ä–∏–º–µ—Ä: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ –º–µ—Ä–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –≤ –≤–æ—Ä–∫–µ—Ä
from app.ws.products_events import continuous_product_snapshot_streamer
from app.ws.battery_events import continuous_robot_avg_streamer
from app.ws.inventory_scans_streamer import continuous_inventory_scans_streamer
from app.ws.inventory_critical_streamer import continuous_inventory_critical_streamer
from app.ws.inventory_status import continuous_inventory_status_avg_streamer
from app.ws.robot_status_count_streamer import continuous_robot_status_count_streamer
from app.ws.robot_activity_streamer import continuous_robot_activity_history_streamer


REDIS_DSN = os.getenv("REDIS_DSN", "redis://myapp-redis:6379/0")
WATCHER_INTERVAL = float(os.getenv("WATCHER_INTERVAL", "2"))


async def main() -> None:
    # —Å–æ–∑–¥–∞—ë–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º EventBus
    bus = EventBus(REDIS_DSN)
    await bus.connect()

    # –¥–µ–ª–∞–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–∞–∫ app.events.bus.bus
    # (–≤–∞–∂–Ω–æ: —ç–º—É–ª—è—Ç–æ—Ä/—Å—Ç—Ä–∏–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç –∏–º–µ–Ω–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π bus)
    bus_module.bus = bus  # type: ignore[attr-defined]

    stop = asyncio.Event()

    def _handle_stop() -> None:
        print("üõë worker: stopping...")
        stop.set()

    loop = asyncio.get_running_loop()
    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT/SIGTERM –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ/–ª–æ–∫–∞–ª—å–Ω–æ
    for sig in (signal.SIGINT, signal.SIGTERM):
        with suppress(NotImplementedError):  # Windows
            loop.add_signal_handler(sig, _handle_stop)

    # —Å—Ç–∞—Ä—Ç—É–µ–º –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä–∞ (–∫–∞–∂–¥—É—é –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞—Å–∫—É)
    tasks: list[asyncio.Task] = []

    # —ç–º—É–ª—è—Ç–æ—Ä/—Å–∏–º—É–ª—è—Ç–æ—Ä —Ä–æ–±–æ—Ç–æ–≤
    tasks.append(asyncio.create_task(run_robot_watcher(interval=WATCHER_INTERVAL)))
    tasks.append(asyncio.create_task(continuous_product_snapshot_streamer(interval=10, use_ws_rooms=False)))
    tasks.append(asyncio.create_task(continuous_robot_avg_streamer(interval=60, use_ws_rooms=False)))
    tasks.append(asyncio.create_task(continuous_inventory_scans_streamer(interval=60, hours=24, use_ws_rooms=False)))
    tasks.append(asyncio.create_task(continuous_inventory_critical_streamer(interval=60, use_ws_rooms=False)))
    tasks.append(asyncio.create_task(continuous_inventory_status_avg_streamer(interval=60, use_ws_rooms=False)))
    tasks.append(asyncio.create_task(continuous_robot_status_count_streamer(interval=60, use_ws_rooms=False)))
    tasks.append(asyncio.create_task(continuous_robot_activity_history_streamer(interval=600, use_ws_rooms=False)))

    # –∂–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await stop.wait()

    # –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for t in tasks:
        t.cancel()
    for t in tasks:
        with suppress(asyncio.CancelledError):
            await t

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await bus.close()
    print("‚úÖ worker: stopped cleanly")


if __name__ == "__main__":
    asyncio.run(main())
