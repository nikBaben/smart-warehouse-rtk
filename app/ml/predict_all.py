import asyncio
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from app.models import Product  # –∏–º–ø–æ—Ä—Ç —Å–≤–æ–µ–π –º–æ–¥–µ–ª–∏
from app.ml.predictor import Predictor
from app.ml.data_access import fetch_all_product_ids
from app.db import async_session_maker


async def predict_all_for_warehouse(warehouse_id: str, horizon_days: int = 60):
    async with async_session_maker() as session:
        # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö product_id
        product_ids = await fetch_all_product_ids(session, warehouse_id)
        print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {len(product_ids)}")

        results = []
        for pid in product_ids:
            model_path = f"/app/models_store/{pid}.pkl"
            predictor = Predictor(model_path=model_path)
            try:
                depletion = await predictor.predict_depletion_date(
                    product_id=pid,
                    warehouse_id=warehouse_id,
                    horizon_days=horizon_days,
                    as_of=datetime.utcnow()
                )
                if depletion:
                    results.append((pid, warehouse_id, depletion))
                    print(f"‚úÖ {pid}: –∏—Å—Ç–æ—â–µ–Ω–∏–µ {depletion}")
                else:
                    print(f"‚ö†Ô∏è {pid}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {pid}: {e}")

        # 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ predict_at
        await save_predictions(session, results)


async def save_predictions(session: AsyncSession, results):
    if not results:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return

    await session.execute("DELETE FROM predict_at WHERE predicted_at < NOW() - INTERVAL '1 day'")
    for pid, wid, dt in results:
        await session.execute(
            """
            INSERT INTO predict_at (product_id, warehouse_id, depletion_at, predicted_at)
            VALUES (:pid, :wid, :dt, NOW())
            """,
            {"pid": pid, "wid": wid, "dt": dt}
        )
    await session.commit()
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ predict_at")


if __name__ == "__main__":
    asyncio.run(predict_all_for_warehouse("WH_001"))
