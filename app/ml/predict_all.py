# app/ml/predict_all.py
from __future__ import annotations

import argparse
import asyncio
from datetime import datetime
from typing import List, Tuple

from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

# ‚ö†Ô∏è –í–∞–∂–Ω–æ: —É —Ç–µ–±—è —Å–µ—Å—Å–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è async_session –≤ app.db.session
# –ï—Å–ª–∏ —É —Ç–µ–±—è –∞–ª–∏–∞—Å –¥—Ä—É–≥–æ–π ‚Äî –ø–æ–ø—Ä–∞–≤—å —Å—Ç—Ä–æ–∫—É –∏–º–ø–æ—Ä—Ç–∞ –Ω–∏–∂–µ.
from app.db.session import async_session as async_session_maker

from app.ml.predictor import Predictor
from app.ml.data_access import fetch_all_product_ids


async def predict_all_for_warehouse(
    warehouse_id: str,
    horizon_days: int = 60,
    default_model_path: str = "/app/models_store/PROD_DEMO.pkl",
) -> None:
    """
    –ü—Ä–æ–≥–æ–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å—Ç–æ—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–ª–∞–¥–∞ –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ predict_at.
    """
    async with async_session_maker() as session:
        # 1) —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        product_ids = await fetch_all_product_ids(session, warehouse_id)
        print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (—Å–∫–ª–∞–¥ {warehouse_id}): {len(product_ids)}")

        results: List[Tuple[str, str, datetime]] = []

        for pid in product_ids:
            model_path = f"/app/models_store/{pid}.pkl"
            predictor = Predictor(model_path=model_path, default_model_path=default_model_path)

            try:
                depletion = await predictor.predict_depletion_date(
                    product_id=pid,
                    warehouse_id=warehouse_id,
                    horizon_days=horizon_days,
                    as_of=datetime.utcnow(),  # naive ‚Üí —Ç–∞–∫ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∑–¥–µ
                )
                if depletion:
                    results.append((pid, warehouse_id, depletion))
                    print(f"‚úÖ {pid}: –∏—Å—Ç–æ—â–µ–Ω–∏–µ {depletion}")
                else:
                    print(f"‚ö†Ô∏è {pid}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {pid}: {e}")

        await save_predictions(session, results)


async def save_predictions(session: AsyncSession, results: List[Tuple[str, str, datetime]]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ predict_at.
    –ü–æ–ª–∏—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏: —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è.
    """
    if not results:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return

    await session.execute(
        text("DELETE FROM predict_at WHERE predicted_at < NOW() - INTERVAL '1 day'")
    )

    for pid, wid, dt in results:
        await session.execute(
            text(
                """
                INSERT INTO predict_at (product_id, warehouse_id, depletion_at, predicted_at)
                VALUES (:pid, :wid, :dt, NOW())
                """
            ),
            {"pid": pid, "wid": wid, "dt": dt},
        )

    await session.commit()
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ predict_at")


def main():
    parser = argparse.ArgumentParser(description="Batch-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—â–µ–Ω–∏—è –ø–æ —Å–∫–ª–∞–¥—É")
    parser.add_argument("--warehouse-id", required=True, help="ID —Å–∫–ª–∞–¥–∞")
    parser.add_argument("--horizon-days", type=int, default=60, help="–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –¥–Ω—è—Ö")
    parser.add_argument(
        "--default-model-path",
        default="/app/models_store/PROD_DEMO.pkl",
        help="–ü—É—Ç—å –∫ –±–∞–∑–æ–≤–æ–π (fallback) –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –Ω–µ—Ç",
    )
    args = parser.parse_args()

    asyncio.run(
        predict_all_for_warehouse(
            warehouse_id=args.warehouse_id,
            horizon_days=args.horizon_days,
            default_model_path=args.default_model_path,
        )
    )


if __name__ == "__main__":
    main()
