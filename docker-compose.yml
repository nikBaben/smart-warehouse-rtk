services:
  db:
    image: postgres:16
    container_name: myapp-db
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d myapp"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7
    container_name: myapp-redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  # --- API-процесс: только HTTP/WS, без фоновых задач ---
  api:
    build: .
    container_name: myapp-api
    working_dir: /app
    env_file:
      - .env
    environment:
      # единое имя для вашего кода
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/myapp
      # роль и редис
      APP_ROLE: api
      USE_REDIS: "1"
      REDIS_DSN: redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    expose:
      - "8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --proxy-headers
    volumes:
      - ./:/app
      - ./tools/websocat:/usr/local/bin/websocat:ro

  # --- WORKER-процесс: эмулятор + все стримеры ---
  worker:
    build: .
    container_name: myapp-worker
    working_dir: /app
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/myapp
      REDIS_DSN: redis://redis:6379/0
      # тонкий пул для воркера, чтобы не душить API
      ROBOT_POOL_SIZE: "30"
      ROBOT_MAX_OVERFLOW: "60"
      ROBOT_POOL_TIMEOUT: "30.0"
      # (опционально) ограничим параллелизм роботов на склад
      ROBOT_CONCURRENCY: "10"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python -m app.workers.runner
    volumes:
      - ./:/app

  # --- База данных для Keycloak ---
  keycloak-db:
    image: postgres:15-alpine
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak_db
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - "5432:5432"
    volumes:
      - keycloak_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak_db"]
      interval: 5s
      timeout: 3s
      retries: 10

  # --- Keycloak ---
  keycloak:
    image: quay.io/keycloak/keycloak:26.4.0
    container_name: myapp-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak_db
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    command:
      - "start-dev"
      - "--verbose"
      - "--hostname=http://51.250.97.137:8080"
      - "--http-enabled=true"
      - "--proxy-headers=xforwarded"
    ports:
      - "8080:8080"

  caddy:
    image: caddy:2
    container_name: myapp-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api

volumes:
  pgdata:
  keycloak_pgdata:
  caddy_data:
  caddy_config:
